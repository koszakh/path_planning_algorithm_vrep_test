# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_planning_vrep_simulation/XML_PATH.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import path_planning_vrep_simulation.msg

class XML_PATH(genpy.Message):
  _md5sum = "cf4ec56c93e44327c120d4f9de7a8dcb"
  _type = "path_planning_vrep_simulation/XML_PATH"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32  robot_id
Step[] path

================================================================================
MSG: path_planning_vrep_simulation/Step
int32   number
Point2d start
Point2d finish
float32 duration
================================================================================
MSG: path_planning_vrep_simulation/Point2d
float32 x
float32 y
"""
  __slots__ = ['robot_id','path']
  _slot_types = ['int32','path_planning_vrep_simulation/Step[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_id,path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XML_PATH, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_id is None:
        self.robot_id = 0
      if self.path is None:
        self.path = []
    else:
      self.robot_id = 0
      self.path = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.robot_id))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        buff.write(_get_struct_i().pack(val1.number))
        _v1 = val1.start
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.finish
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        buff.write(_get_struct_f().pack(val1.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (self.robot_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = path_planning_vrep_simulation.msg.Step()
        start = end
        end += 4
        (val1.number,) = _get_struct_i().unpack(str[start:end])
        _v3 = val1.start
        _x = _v3
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.finish
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_f().unpack(str[start:end])
        self.path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.robot_id))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        buff.write(_get_struct_i().pack(val1.number))
        _v5 = val1.start
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = val1.finish
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        buff.write(_get_struct_f().pack(val1.duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (self.robot_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = path_planning_vrep_simulation.msg.Step()
        start = end
        end += 4
        (val1.number,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.start
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.finish
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_f().unpack(str[start:end])
        self.path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
