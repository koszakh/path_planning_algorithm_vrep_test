# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_planning_vrep_simulation/RobotData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import path_planning_vrep_simulation.msg

class RobotData(genpy.Message):
  _md5sum = "66fdc63dce521c82c173fa4aa91bfc51"
  _type = "path_planning_vrep_simulation/RobotData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32     id
Point2d   position
float32   direction
Point2d[] corners
XML_PATH path
bool      path_created
Step   actual_point
Step   next_point
float32     angle_to_actual_point
int32     actual_angle
int32[]   sector
float32 old_error
float32 error_sum

bool      on_finish
bool      move
bool      rotation
bool stop

================================================================================
MSG: path_planning_vrep_simulation/Point2d
float32 x
float32 y

================================================================================
MSG: path_planning_vrep_simulation/XML_PATH
int32  robot_id
Step[] path

================================================================================
MSG: path_planning_vrep_simulation/Step
int32   number
Point2d start
Point2d finish
float32 duration"""
  __slots__ = ['id','position','direction','corners','path','path_created','actual_point','next_point','angle_to_actual_point','actual_angle','sector','old_error','error_sum','on_finish','move','rotation','stop']
  _slot_types = ['int32','path_planning_vrep_simulation/Point2d','float32','path_planning_vrep_simulation/Point2d[]','path_planning_vrep_simulation/XML_PATH','bool','path_planning_vrep_simulation/Step','path_planning_vrep_simulation/Step','float32','int32','int32[]','float32','float32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,position,direction,corners,path,path_created,actual_point,next_point,angle_to_actual_point,actual_angle,sector,old_error,error_sum,on_finish,move,rotation,stop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.position is None:
        self.position = path_planning_vrep_simulation.msg.Point2d()
      if self.direction is None:
        self.direction = 0.
      if self.corners is None:
        self.corners = []
      if self.path is None:
        self.path = path_planning_vrep_simulation.msg.XML_PATH()
      if self.path_created is None:
        self.path_created = False
      if self.actual_point is None:
        self.actual_point = path_planning_vrep_simulation.msg.Step()
      if self.next_point is None:
        self.next_point = path_planning_vrep_simulation.msg.Step()
      if self.angle_to_actual_point is None:
        self.angle_to_actual_point = 0.
      if self.actual_angle is None:
        self.actual_angle = 0
      if self.sector is None:
        self.sector = []
      if self.old_error is None:
        self.old_error = 0.
      if self.error_sum is None:
        self.error_sum = 0.
      if self.on_finish is None:
        self.on_finish = False
      if self.move is None:
        self.move = False
      if self.rotation is None:
        self.rotation = False
      if self.stop is None:
        self.stop = False
    else:
      self.id = 0
      self.position = path_planning_vrep_simulation.msg.Point2d()
      self.direction = 0.
      self.corners = []
      self.path = path_planning_vrep_simulation.msg.XML_PATH()
      self.path_created = False
      self.actual_point = path_planning_vrep_simulation.msg.Step()
      self.next_point = path_planning_vrep_simulation.msg.Step()
      self.angle_to_actual_point = 0.
      self.actual_angle = 0
      self.sector = []
      self.old_error = 0.
      self.error_sum = 0.
      self.on_finish = False
      self.move = False
      self.rotation = False
      self.stop = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3f().pack(_x.id, _x.position.x, _x.position.y, _x.direction))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      buff.write(_get_struct_i().pack(self.path.robot_id))
      length = len(self.path.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.path:
        buff.write(_get_struct_i().pack(val1.number))
        _v1 = val1.start
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.finish
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        buff.write(_get_struct_f().pack(val1.duration))
      _x = self
      buff.write(_get_struct_Bi5fi6fi().pack(_x.path_created, _x.actual_point.number, _x.actual_point.start.x, _x.actual_point.start.y, _x.actual_point.finish.x, _x.actual_point.finish.y, _x.actual_point.duration, _x.next_point.number, _x.next_point.start.x, _x.next_point.start.y, _x.next_point.finish.x, _x.next_point.finish.y, _x.next_point.duration, _x.angle_to_actual_point, _x.actual_angle))
      length = len(self.sector)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.sector))
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.old_error, _x.error_sum, _x.on_finish, _x.move, _x.rotation, _x.stop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = path_planning_vrep_simulation.msg.Point2d()
      if self.corners is None:
        self.corners = None
      if self.path is None:
        self.path = path_planning_vrep_simulation.msg.XML_PATH()
      if self.actual_point is None:
        self.actual_point = path_planning_vrep_simulation.msg.Step()
      if self.next_point is None:
        self.next_point = path_planning_vrep_simulation.msg.Step()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.position.x, _x.position.y, _x.direction,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = path_planning_vrep_simulation.msg.Point2d()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.corners.append(val1)
      start = end
      end += 4
      (self.path.robot_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.path = []
      for i in range(0, length):
        val1 = path_planning_vrep_simulation.msg.Step()
        start = end
        end += 4
        (val1.number,) = _get_struct_i().unpack(str[start:end])
        _v3 = val1.start
        _x = _v3
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.finish
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_f().unpack(str[start:end])
        self.path.path.append(val1)
      _x = self
      start = end
      end += 57
      (_x.path_created, _x.actual_point.number, _x.actual_point.start.x, _x.actual_point.start.y, _x.actual_point.finish.x, _x.actual_point.finish.y, _x.actual_point.duration, _x.next_point.number, _x.next_point.start.x, _x.next_point.start.y, _x.next_point.finish.x, _x.next_point.finish.y, _x.next_point.duration, _x.angle_to_actual_point, _x.actual_angle,) = _get_struct_Bi5fi6fi().unpack(str[start:end])
      self.path_created = bool(self.path_created)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.sector = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.old_error, _x.error_sum, _x.on_finish, _x.move, _x.rotation, _x.stop,) = _get_struct_2f4B().unpack(str[start:end])
      self.on_finish = bool(self.on_finish)
      self.move = bool(self.move)
      self.rotation = bool(self.rotation)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3f().pack(_x.id, _x.position.x, _x.position.y, _x.direction))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      buff.write(_get_struct_i().pack(self.path.robot_id))
      length = len(self.path.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.path:
        buff.write(_get_struct_i().pack(val1.number))
        _v5 = val1.start
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = val1.finish
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        buff.write(_get_struct_f().pack(val1.duration))
      _x = self
      buff.write(_get_struct_Bi5fi6fi().pack(_x.path_created, _x.actual_point.number, _x.actual_point.start.x, _x.actual_point.start.y, _x.actual_point.finish.x, _x.actual_point.finish.y, _x.actual_point.duration, _x.next_point.number, _x.next_point.start.x, _x.next_point.start.y, _x.next_point.finish.x, _x.next_point.finish.y, _x.next_point.duration, _x.angle_to_actual_point, _x.actual_angle))
      length = len(self.sector)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.sector.tostring())
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.old_error, _x.error_sum, _x.on_finish, _x.move, _x.rotation, _x.stop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = path_planning_vrep_simulation.msg.Point2d()
      if self.corners is None:
        self.corners = None
      if self.path is None:
        self.path = path_planning_vrep_simulation.msg.XML_PATH()
      if self.actual_point is None:
        self.actual_point = path_planning_vrep_simulation.msg.Step()
      if self.next_point is None:
        self.next_point = path_planning_vrep_simulation.msg.Step()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.position.x, _x.position.y, _x.direction,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = path_planning_vrep_simulation.msg.Point2d()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.corners.append(val1)
      start = end
      end += 4
      (self.path.robot_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.path = []
      for i in range(0, length):
        val1 = path_planning_vrep_simulation.msg.Step()
        start = end
        end += 4
        (val1.number,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.start
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.finish
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_f().unpack(str[start:end])
        self.path.path.append(val1)
      _x = self
      start = end
      end += 57
      (_x.path_created, _x.actual_point.number, _x.actual_point.start.x, _x.actual_point.start.y, _x.actual_point.finish.x, _x.actual_point.finish.y, _x.actual_point.duration, _x.next_point.number, _x.next_point.start.x, _x.next_point.start.y, _x.next_point.finish.x, _x.next_point.finish.y, _x.next_point.duration, _x.angle_to_actual_point, _x.actual_angle,) = _get_struct_Bi5fi6fi().unpack(str[start:end])
      self.path_created = bool(self.path_created)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.sector = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 12
      (_x.old_error, _x.error_sum, _x.on_finish, _x.move, _x.rotation, _x.stop,) = _get_struct_2f4B().unpack(str[start:end])
      self.on_finish = bool(self.on_finish)
      self.move = bool(self.move)
      self.rotation = bool(self.rotation)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_2f4B = None
def _get_struct_2f4B():
    global _struct_2f4B
    if _struct_2f4B is None:
        _struct_2f4B = struct.Struct("<2f4B")
    return _struct_2f4B
_struct_Bi5fi6fi = None
def _get_struct_Bi5fi6fi():
    global _struct_Bi5fi6fi
    if _struct_Bi5fi6fi is None:
        _struct_Bi5fi6fi = struct.Struct("<Bi5fi6fi")
    return _struct_Bi5fi6fi
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_i3f = None
def _get_struct_i3f():
    global _struct_i3f
    if _struct_i3f is None:
        _struct_i3f = struct.Struct("<i3f")
    return _struct_i3f
