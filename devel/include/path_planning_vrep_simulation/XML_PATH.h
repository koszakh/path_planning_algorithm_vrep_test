// Generated by gencpp from file path_planning_vrep_simulation/XML_PATH.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_VREP_SIMULATION_MESSAGE_XML_PATH_H
#define PATH_PLANNING_VREP_SIMULATION_MESSAGE_XML_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_planning_vrep_simulation/Step.h>

namespace path_planning_vrep_simulation
{
template <class ContainerAllocator>
struct XML_PATH_
{
  typedef XML_PATH_<ContainerAllocator> Type;

  XML_PATH_()
    : robot_id(0)
    , path()  {
    }
  XML_PATH_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef std::vector< ::path_planning_vrep_simulation::Step_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_planning_vrep_simulation::Step_<ContainerAllocator> >::other >  _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> const> ConstPtr;

}; // struct XML_PATH_

typedef ::path_planning_vrep_simulation::XML_PATH_<std::allocator<void> > XML_PATH;

typedef boost::shared_ptr< ::path_planning_vrep_simulation::XML_PATH > XML_PATHPtr;
typedef boost::shared_ptr< ::path_planning_vrep_simulation::XML_PATH const> XML_PATHConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planning_vrep_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'path_planning_vrep_simulation': ['/home/konst/path_planning_algorithm_vrep_test/src/path_planning_vrep_simulation-master/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf4ec56c93e44327c120d4f9de7a8dcb";
  }

  static const char* value(const ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf4ec56c93e44327ULL;
  static const uint64_t static_value2 = 0xc120d4f9de7a8dcbULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning_vrep_simulation/XML_PATH";
  }

  static const char* value(const ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32  robot_id\n"
"Step[] path\n"
"\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/Step\n"
"int32   number\n"
"Point2d start\n"
"Point2d finish\n"
"float32 duration\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/Point2d\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XML_PATH_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_planning_vrep_simulation::Step_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_VREP_SIMULATION_MESSAGE_XML_PATH_H
