// Generated by gencpp from file path_planning_vrep_simulation/WheelRotationData.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_VREP_SIMULATION_MESSAGE_WHEELROTATIONDATA_H
#define PATH_PLANNING_VREP_SIMULATION_MESSAGE_WHEELROTATIONDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planning_vrep_simulation
{
template <class ContainerAllocator>
struct WheelRotationData_
{
  typedef WheelRotationData_<ContainerAllocator> Type;

  WheelRotationData_()
    : id(0)
    , left_velocity(0.0)
    , right_velocity(0.0)
    , rotation(false)
    , goal_reached(false)  {
    }
  WheelRotationData_(const ContainerAllocator& _alloc)
    : id(0)
    , left_velocity(0.0)
    , right_velocity(0.0)
    , rotation(false)
    , goal_reached(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef float _left_velocity_type;
  _left_velocity_type left_velocity;

   typedef float _right_velocity_type;
  _right_velocity_type right_velocity;

   typedef uint8_t _rotation_type;
  _rotation_type rotation;

   typedef uint8_t _goal_reached_type;
  _goal_reached_type goal_reached;





  typedef boost::shared_ptr< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> const> ConstPtr;

}; // struct WheelRotationData_

typedef ::path_planning_vrep_simulation::WheelRotationData_<std::allocator<void> > WheelRotationData;

typedef boost::shared_ptr< ::path_planning_vrep_simulation::WheelRotationData > WheelRotationDataPtr;
typedef boost::shared_ptr< ::path_planning_vrep_simulation::WheelRotationData const> WheelRotationDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planning_vrep_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'path_planning_vrep_simulation': ['/home/konst/path_planning_algorithm_vrep_test/src/path_planning_vrep_simulation-master/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16794a3f07ee22fddbfe509a3034e43c";
  }

  static const char* value(const ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16794a3f07ee22fdULL;
  static const uint64_t static_value2 = 0xdbfe509a3034e43cULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning_vrep_simulation/WheelRotationData";
  }

  static const char* value(const ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"float32 left_velocity\n"
"float32 right_velocity\n"
"bool rotation\n"
"bool goal_reached\n"
;
  }

  static const char* value(const ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.left_velocity);
      stream.next(m.right_velocity);
      stream.next(m.rotation);
      stream.next(m.goal_reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelRotationData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning_vrep_simulation::WheelRotationData_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "left_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.left_velocity);
    s << indent << "right_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.right_velocity);
    s << indent << "rotation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotation);
    s << indent << "goal_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_VREP_SIMULATION_MESSAGE_WHEELROTATIONDATA_H
