// Generated by gencpp from file path_planning_vrep_simulation/All_XML_PATHS.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_VREP_SIMULATION_MESSAGE_ALL_XML_PATHS_H
#define PATH_PLANNING_VREP_SIMULATION_MESSAGE_ALL_XML_PATHS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_planning_vrep_simulation/XML_PATH.h>

namespace path_planning_vrep_simulation
{
template <class ContainerAllocator>
struct All_XML_PATHS_
{
  typedef All_XML_PATHS_<ContainerAllocator> Type;

  All_XML_PATHS_()
    : paths()  {
    }
  All_XML_PATHS_(const ContainerAllocator& _alloc)
    : paths(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >::other >  _paths_type;
  _paths_type paths;





  typedef boost::shared_ptr< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> const> ConstPtr;

}; // struct All_XML_PATHS_

typedef ::path_planning_vrep_simulation::All_XML_PATHS_<std::allocator<void> > All_XML_PATHS;

typedef boost::shared_ptr< ::path_planning_vrep_simulation::All_XML_PATHS > All_XML_PATHSPtr;
typedef boost::shared_ptr< ::path_planning_vrep_simulation::All_XML_PATHS const> All_XML_PATHSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planning_vrep_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'path_planning_vrep_simulation': ['/home/konst/path_planning_vrep_simulation/src/path_planning_vrep_simulation-master/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "059b622873eff4f7b4831c208d9e7cc2";
  }

  static const char* value(const ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x059b622873eff4f7ULL;
  static const uint64_t static_value2 = 0xb4831c208d9e7cc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning_vrep_simulation/All_XML_PATHS";
  }

  static const char* value(const ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "XML_PATH[] paths\n\
\n\
================================================================================\n\
MSG: path_planning_vrep_simulation/XML_PATH\n\
int32  robot_id\n\
Step[] path\n\
\n\
================================================================================\n\
MSG: path_planning_vrep_simulation/Step\n\
int32   number\n\
Point2d start\n\
Point2d finish\n\
float32 duration\n\
================================================================================\n\
MSG: path_planning_vrep_simulation/Point2d\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.paths);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct All_XML_PATHS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning_vrep_simulation::All_XML_PATHS_<ContainerAllocator>& v)
  {
    s << indent << "paths[]" << std::endl;
    for (size_t i = 0; i < v.paths.size(); ++i)
    {
      s << indent << "  paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >::stream(s, indent + "    ", v.paths[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_VREP_SIMULATION_MESSAGE_ALL_XML_PATHS_H
