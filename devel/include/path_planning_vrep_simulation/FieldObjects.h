// Generated by gencpp from file path_planning_vrep_simulation/FieldObjects.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_VREP_SIMULATION_MESSAGE_FIELDOBJECTS_H
#define PATH_PLANNING_VREP_SIMULATION_MESSAGE_FIELDOBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_planning_vrep_simulation/RobotData.h>
#include <path_planning_vrep_simulation/ObstacleData.h>
#include <path_planning_vrep_simulation/GoalData.h>

namespace path_planning_vrep_simulation
{
template <class ContainerAllocator>
struct FieldObjects_
{
  typedef FieldObjects_<ContainerAllocator> Type;

  FieldObjects_()
    : source()
    , robots()
    , obstacles()
    , goals()  {
    }
  FieldObjects_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , robots(_alloc)
    , obstacles(_alloc)
    , goals(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::vector< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >::other >  _robots_type;
  _robots_type robots;

   typedef std::vector< ::path_planning_vrep_simulation::ObstacleData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_planning_vrep_simulation::ObstacleData_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;

   typedef std::vector< ::path_planning_vrep_simulation::GoalData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_planning_vrep_simulation::GoalData_<ContainerAllocator> >::other >  _goals_type;
  _goals_type goals;





  typedef boost::shared_ptr< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> const> ConstPtr;

}; // struct FieldObjects_

typedef ::path_planning_vrep_simulation::FieldObjects_<std::allocator<void> > FieldObjects;

typedef boost::shared_ptr< ::path_planning_vrep_simulation::FieldObjects > FieldObjectsPtr;
typedef boost::shared_ptr< ::path_planning_vrep_simulation::FieldObjects const> FieldObjectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planning_vrep_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'path_planning_vrep_simulation': ['/home/konst/path_planning_algorithm_vrep_test/src/path_planning_vrep_simulation-master/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c28964370b5f3547a5bf2d3a6ecb3366";
  }

  static const char* value(const ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc28964370b5f3547ULL;
  static const uint64_t static_value2 = 0xa5bf2d3a6ecb3366ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning_vrep_simulation/FieldObjects";
  }

  static const char* value(const ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string         source\n"
"RobotData[]    robots\n"
"ObstacleData[] obstacles\n"
"GoalData[]     goals\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/RobotData\n"
"int32     id\n"
"Point2d   position\n"
"float32   direction\n"
"Point2d[] corners\n"
"XML_PATH path\n"
"bool      path_created\n"
"Step   actual_point\n"
"Step   next_point\n"
"float32     angle_to_actual_point\n"
"int32     actual_angle\n"
"int32[]   sector\n"
"float32 old_error\n"
"float32 error_sum\n"
"\n"
"bool      on_finish\n"
"bool      move\n"
"bool      rotation\n"
"bool stop\n"
"\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/Point2d\n"
"float32 x\n"
"float32 y\n"
"\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/XML_PATH\n"
"int32  robot_id\n"
"Step[] path\n"
"\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/Step\n"
"int32   number\n"
"Point2d start\n"
"Point2d finish\n"
"float32 duration\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/ObstacleData\n"
"int32     id\n"
"Point2d   center\n"
"Point2d[] corners\n"
"================================================================================\n"
"MSG: path_planning_vrep_simulation/GoalData\n"
"int32     id\n"
"Point2d   center\n"
"Point2d[] corners\n"
;
  }

  static const char* value(const ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.robots);
      stream.next(m.obstacles);
      stream.next(m.goals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FieldObjects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning_vrep_simulation::FieldObjects_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "robots[]" << std::endl;
    for (size_t i = 0; i < v.robots.size(); ++i)
    {
      s << indent << "  robots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >::stream(s, indent + "    ", v.robots[i]);
    }
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_planning_vrep_simulation::ObstacleData_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
    s << indent << "goals[]" << std::endl;
    for (size_t i = 0; i < v.goals.size(); ++i)
    {
      s << indent << "  goals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_planning_vrep_simulation::GoalData_<ContainerAllocator> >::stream(s, indent + "    ", v.goals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_VREP_SIMULATION_MESSAGE_FIELDOBJECTS_H
