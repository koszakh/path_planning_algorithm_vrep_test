// Generated by gencpp from file path_planning_vrep_simulation/RobotData.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_VREP_SIMULATION_MESSAGE_ROBOTDATA_H
#define PATH_PLANNING_VREP_SIMULATION_MESSAGE_ROBOTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <path_planning_vrep_simulation/Point2d.h>
#include <path_planning_vrep_simulation/Point2d.h>
#include <path_planning_vrep_simulation/XML_PATH.h>
#include <path_planning_vrep_simulation/Step.h>
#include <path_planning_vrep_simulation/Step.h>

namespace path_planning_vrep_simulation
{
template <class ContainerAllocator>
struct RobotData_
{
  typedef RobotData_<ContainerAllocator> Type;

  RobotData_()
    : id(0)
    , position()
    , direction(0.0)
    , corners()
    , path()
    , path_created(false)
    , actual_point()
    , next_point()
    , angle_to_actual_point(0.0)
    , actual_angle(0)
    , sector()
    , old_error(0.0)
    , error_sum(0.0)
    , on_finish(false)
    , move(false)
    , rotation(false)
    , stop(false)  {
    }
  RobotData_(const ContainerAllocator& _alloc)
    : id(0)
    , position(_alloc)
    , direction(0.0)
    , corners(_alloc)
    , path(_alloc)
    , path_created(false)
    , actual_point(_alloc)
    , next_point(_alloc)
    , angle_to_actual_point(0.0)
    , actual_angle(0)
    , sector(_alloc)
    , old_error(0.0)
    , error_sum(0.0)
    , on_finish(false)
    , move(false)
    , rotation(false)
    , stop(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::path_planning_vrep_simulation::Point2d_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _direction_type;
  _direction_type direction;

   typedef std::vector< ::path_planning_vrep_simulation::Point2d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::path_planning_vrep_simulation::Point2d_<ContainerAllocator> >::other >  _corners_type;
  _corners_type corners;

   typedef  ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef uint8_t _path_created_type;
  _path_created_type path_created;

   typedef  ::path_planning_vrep_simulation::Step_<ContainerAllocator>  _actual_point_type;
  _actual_point_type actual_point;

   typedef  ::path_planning_vrep_simulation::Step_<ContainerAllocator>  _next_point_type;
  _next_point_type next_point;

   typedef float _angle_to_actual_point_type;
  _angle_to_actual_point_type angle_to_actual_point;

   typedef int32_t _actual_angle_type;
  _actual_angle_type actual_angle;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sector_type;
  _sector_type sector;

   typedef float _old_error_type;
  _old_error_type old_error;

   typedef float _error_sum_type;
  _error_sum_type error_sum;

   typedef uint8_t _on_finish_type;
  _on_finish_type on_finish;

   typedef uint8_t _move_type;
  _move_type move;

   typedef uint8_t _rotation_type;
  _rotation_type rotation;

   typedef uint8_t _stop_type;
  _stop_type stop;





  typedef boost::shared_ptr< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> const> ConstPtr;

}; // struct RobotData_

typedef ::path_planning_vrep_simulation::RobotData_<std::allocator<void> > RobotData;

typedef boost::shared_ptr< ::path_planning_vrep_simulation::RobotData > RobotDataPtr;
typedef boost::shared_ptr< ::path_planning_vrep_simulation::RobotData const> RobotDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planning_vrep_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'path_planning_vrep_simulation': ['/home/konst/path_planning_vrep_simulation/src/path_planning_vrep_simulation-master/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66fdc63dce521c82c173fa4aa91bfc51";
  }

  static const char* value(const ::path_planning_vrep_simulation::RobotData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66fdc63dce521c82ULL;
  static const uint64_t static_value2 = 0xc173fa4aa91bfc51ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning_vrep_simulation/RobotData";
  }

  static const char* value(const ::path_planning_vrep_simulation::RobotData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32     id\n\
Point2d   position\n\
float32   direction\n\
Point2d[] corners\n\
XML_PATH path\n\
bool      path_created\n\
Step   actual_point\n\
Step   next_point\n\
float32     angle_to_actual_point\n\
int32     actual_angle\n\
int32[]   sector\n\
float32 old_error\n\
float32 error_sum\n\
\n\
bool      on_finish\n\
bool      move\n\
bool      rotation\n\
bool stop\n\
\n\
================================================================================\n\
MSG: path_planning_vrep_simulation/Point2d\n\
float32 x\n\
float32 y\n\
\n\
================================================================================\n\
MSG: path_planning_vrep_simulation/XML_PATH\n\
int32  robot_id\n\
Step[] path\n\
\n\
================================================================================\n\
MSG: path_planning_vrep_simulation/Step\n\
int32   number\n\
Point2d start\n\
Point2d finish\n\
float32 duration\n\
";
  }

  static const char* value(const ::path_planning_vrep_simulation::RobotData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.direction);
      stream.next(m.corners);
      stream.next(m.path);
      stream.next(m.path_created);
      stream.next(m.actual_point);
      stream.next(m.next_point);
      stream.next(m.angle_to_actual_point);
      stream.next(m.actual_angle);
      stream.next(m.sector);
      stream.next(m.old_error);
      stream.next(m.error_sum);
      stream.next(m.on_finish);
      stream.next(m.move);
      stream.next(m.rotation);
      stream.next(m.stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning_vrep_simulation::RobotData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning_vrep_simulation::RobotData_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::path_planning_vrep_simulation::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
    s << indent << "corners[]" << std::endl;
    for (size_t i = 0; i < v.corners.size(); ++i)
    {
      s << indent << "  corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::path_planning_vrep_simulation::Point2d_<ContainerAllocator> >::stream(s, indent + "    ", v.corners[i]);
    }
    s << indent << "path: ";
    s << std::endl;
    Printer< ::path_planning_vrep_simulation::XML_PATH_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "path_created: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.path_created);
    s << indent << "actual_point: ";
    s << std::endl;
    Printer< ::path_planning_vrep_simulation::Step_<ContainerAllocator> >::stream(s, indent + "  ", v.actual_point);
    s << indent << "next_point: ";
    s << std::endl;
    Printer< ::path_planning_vrep_simulation::Step_<ContainerAllocator> >::stream(s, indent + "  ", v.next_point);
    s << indent << "angle_to_actual_point: ";
    Printer<float>::stream(s, indent + "  ", v.angle_to_actual_point);
    s << indent << "actual_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.actual_angle);
    s << indent << "sector[]" << std::endl;
    for (size_t i = 0; i < v.sector.size(); ++i)
    {
      s << indent << "  sector[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sector[i]);
    }
    s << indent << "old_error: ";
    Printer<float>::stream(s, indent + "  ", v.old_error);
    s << indent << "error_sum: ";
    Printer<float>::stream(s, indent + "  ", v.error_sum);
    s << indent << "on_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on_finish);
    s << indent << "move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move);
    s << indent << "rotation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotation);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_VREP_SIMULATION_MESSAGE_ROBOTDATA_H
